/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package applicationbanqueclient;

import ejb.SessionBeanClientRemote;
import entites.Client;
import entites.Compte;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.Connection;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.DefaultListModel;
import org.apache.jasper.tagplugins.jstl.ForEach;

/**
 *
 * @author Thibault
 */
public class GUIClient extends javax.swing.JFrame
{
    private Topic topic=null;
    private Session session=null;
    private MessageProducer producer = null;
    
    private Client client=null;
    private List<Compte> listCompte;
    
    
    /**
     * Creates new form GUIClient
     */
    public GUIClient(Client cl,Topic top,Session ses) 
    {
        client=cl;
        topic=top;
        session=ses;
        
        initComponents();
        
        try
        {
            producer=session.createProducer(topic);
        } 
        catch (JMSException e)
        {
            System.err.println(e);
        }
        
        RefreshList(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        BGtypecompte = new javax.swing.ButtonGroup();
        Bvalider = new javax.swing.JButton();
        TFmontant = new javax.swing.JTextField();
        Lmontant = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LIListeCompteDonneur = new javax.swing.JList();
        RBcomptePerso = new javax.swing.JRadioButton();
        RBcompteTier = new javax.swing.JRadioButton();
        TFCompteTier = new javax.swing.JTextField();
        LNumCompte = new javax.swing.JLabel();
        LCompteDonneur = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LIListeComptereceveur = new javax.swing.JList();
        Lmessage = new javax.swing.JLabel();
        LCompteReceveur = new javax.swing.JLabel();
        BTRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Bvalider.setText("Valider");
        Bvalider.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BvaliderActionPerformed(evt);
            }
        });

        Lmontant.setText("Montant : ");

        jScrollPane1.setViewportView(LIListeCompteDonneur);

        BGtypecompte.add(RBcomptePerso);
        RBcomptePerso.setText("compte personnel");

        BGtypecompte.add(RBcompteTier);
        RBcompteTier.setText("compte tier");

        LNumCompte.setText("NÂ° Compte : ");

        LCompteDonneur.setText("Compte donneur");

        jScrollPane2.setViewportView(LIListeComptereceveur);

        LCompteReceveur.setText("Compte receveur");

        BTRefresh.setText("Refresh");
        BTRefresh.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BTRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(LCompteDonneur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LCompteReceveur)
                .addGap(225, 225, 225))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(LNumCompte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RBcompteTier)
                            .addComponent(TFCompteTier, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(RBcomptePerso))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 106, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(Lmontant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TFmontant, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(Bvalider, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(Lmessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BTRefresh)
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(BTRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LCompteDonneur, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LCompteReceveur))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Bvalider, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TFmontant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Lmontant))
                                .addGap(49, 49, 49))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(RBcompteTier)
                                    .addComponent(RBcomptePerso))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TFCompteTier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LNumCompte))
                                .addGap(176, 176, 176)
                                .addComponent(Lmessage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BvaliderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BvaliderActionPerformed
    {//GEN-HEADEREND:event_BvaliderActionPerformed
        
        Lmessage.setText("");
        
        float fmontant;
        try
        {
            fmontant = Float.parseFloat(TFmontant.getText());
        } 
        catch (NumberFormatException e)
        {
            Lmessage.setText("inserer un montant correct.");
            return;
        }
        
        //vÃ©rification qu'un compte donneur est sÃ©lectionnÃ©
        if (LIListeCompteDonneur.getSelectedValue()==null)
        {
            Lmessage.setText("selectionner un compte donneur.");
            return;
        }      
        
        //verification que le montant ne dÃ©passe pas le solde du compte donneur
        if(((Compte)LIListeCompteDonneur.getSelectedValue()).getSolde()<fmontant)
        {
            Lmessage.setText("le montant doit etre infÃ©rieur au solde.");
            return;
        }
        
        
        
        if(RBcomptePerso.isSelected()) // pour le cas d'un transfert de compte propre
        {
            //vÃ©rification qu'un compte receveur est sÃ©lectionnÃ©
            if (LIListeComptereceveur.getSelectedValue()==null)
            {
                Lmessage.setText("selectionner un compte receveur.");
                return;
            }  
            
            //verification que le compte donneur et receveur sont diffÃ©rents
            if(LIListeCompteDonneur.getSelectedIndex()==LIListeComptereceveur.getSelectedIndex())
            {
                Lmessage.setText("le compte donneur doit etre diffÃ©rent du receveur.");
                return;
            }
            
            if(lookupSessionBeanClientRemote().TransfereDeA((Compte)LIListeCompteDonneur.getSelectedValue(), ((Compte)LIListeComptereceveur.getSelectedValue()).getIdcompte(), fmontant))
            {
                Lmessage.setText("opÃ©ration rÃ©ussie.");
                EnvoiTopic("transaction reussie entre comptes propres donneur : " + ((Compte)LIListeCompteDonneur.getSelectedValue()).getIdcompte() + "   receveur : " + ((Compte)LIListeComptereceveur.getSelectedValue()).getIdcompte() + "   montant : " + fmontant,fmontant);
                RefreshList();
            }
            else
            {
                Lmessage.setText("opÃ©ration Ã©chouÃ©e. Une erreur inconnue s'est produite.");
            }
            
            
        }
        else // pour le cas d'un transfert de compte tier
        {
            //vÃ©rification que le compte receveur est rÃ©fÃ©rencÃ©
            if(TFCompteTier.getText().equals(""))
            {
                Lmessage.setText("Le compte tier doit etre rÃ©fÃ©rencÃ©.");
                return;
            }
            
            //verification que le compte donneur et receveur sont diffÃ©rents
            if(((Compte)LIListeCompteDonneur.getSelectedValue()).getIdcompte().equals(TFCompteTier.getText()))
            {
                Lmessage.setText("le compte donneur doit etre diffÃ©rent du receveur.");
                return;
            }
            
            //verifier si compte existe
            
            if(lookupSessionBeanClientRemote().TransfereDeA((Compte)LIListeCompteDonneur.getSelectedValue(), TFCompteTier.getText(), fmontant))
            {
                EnvoiTopic("transaction reussie entre comptes tiers donneur : " + ((Compte)LIListeCompteDonneur.getSelectedValue()).getIdcompte() + "   receveur : " + TFCompteTier.getText()  + "   montant : " + fmontant,fmontant);
                RefreshList();
            }
            else
            {
                Lmessage.setText("opÃ©ration Ã©chouÃ©e. VÃ©rifier le compte que vous avez entrÃ©.");
                
            }
            
            
            
        }
        
        
    }//GEN-LAST:event_BvaliderActionPerformed

    private void BTRefreshActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BTRefreshActionPerformed
    {//GEN-HEADEREND:event_BTRefreshActionPerformed
        RefreshList();
    }//GEN-LAST:event_BTRefreshActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BGtypecompte;
    private javax.swing.JButton BTRefresh;
    private javax.swing.JButton Bvalider;
    private javax.swing.JLabel LCompteDonneur;
    private javax.swing.JLabel LCompteReceveur;
    private javax.swing.JList LIListeCompteDonneur;
    private javax.swing.JList LIListeComptereceveur;
    private javax.swing.JLabel LNumCompte;
    private javax.swing.JLabel Lmessage;
    private javax.swing.JLabel Lmontant;
    private javax.swing.JRadioButton RBcomptePerso;
    private javax.swing.JRadioButton RBcompteTier;
    private javax.swing.JTextField TFCompteTier;
    private javax.swing.JTextField TFmontant;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    //permet d'acceder au SessionBean
    private SessionBeanClientRemote lookupSessionBeanClientRemote()
    {
        try
        {
            Context c = new InitialContext();
            return (SessionBeanClientRemote) c.lookup("java:comp/env/SessionBeanClient");
        } catch (NamingException ne)
        {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", ne);
            throw new RuntimeException(ne);
        }
    }
    
    //refresh les liste de compte
    private void RefreshList()
    {
        listCompte = lookupSessionBeanClientRemote().GetComptes(client);
        DefaultListModel dlm = new DefaultListModel();
        
        for(Compte c : listCompte)
            dlm.addElement(c);
        
        LIListeCompteDonneur.setModel(dlm);
        LIListeComptereceveur.setModel(dlm);
    }
    
    //permet d'envoyer un message sur le topic
    private void EnvoiTopic(String msg,float montant)
    {
        //petit check parce que trop peur de cÃ©dric
        if(!msg.equals("") && msg!=null)
        {
            try
            {
                TextMessage tm = session.createTextMessage();
                
                //donne le type de msg entre log et credit
                tm.setStringProperty("type", "transfert");
                tm.setFloatProperty("montant", montant);
                
                tm.setText(msg);
                producer.send(tm);
            } catch (JMSException e)
            {
                System.err.println(e);
            }
        }
    }
    
    

}
